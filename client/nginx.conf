# Указывает, от имени какого пользователя будут запускаться процессы Nginx. Здесь указан пользователь nginx,
# который часто используется для обеспечения безопасности, чтобы процессы Nginx не имели слишком высоких привилегий.
user nginx;

# Указывает количество рабочих процессов Nginx. Значение auto автоматически устанавливает это количество равным числу доступных ядер процессора.
# Это помогает оптимизировать производительность, используя все доступные ресурсы сервера.
worker_processes auto;

# Указывает путь к файлу журнала ошибок и уровень логирования notice. Уровень notice включает информационные сообщения,
# которые могут помочь в отладке и мониторинге работы сервера.
error_log /var/log/nginx/error.log notice;

# Указывает файл, в котором будет храниться PID (идентификатор процесса) главного процесса Nginx.
# Это важно для управления процессом, например, для остановки или перезапуска Nginx.
pid /var/run/nginx.pid;

# Этот блок содержит параметры для обработки соединений.
events {
    # Максимальное количество соединений, которые каждый рабочий процесс может одновременно обрабатывать.
    # Увеличение этого значения позволяет обрабатывать больше одновременных соединений, что полезно для высоконагруженных серверов.
    worker_connections 1024;
}

http {
    # Подключает файл mime.types, который содержит ассоциации расширений файлов и MIME-типов.
    # Это позволяет Nginx правильно определять типы файлов и отправлять соответствующие заголовки, что важно для корректного отображения контента в браузерах.
    include /etc/nginx/mime.types;

    # Задает MIME-тип по умолчанию для файлов, расширение которых не определено в mime.types.
    # MIME-тип application/octet-stream используется для бинарных данных и обычно заставляет браузер предлагать сохранить файл на диск.
    default_type application/octet-stream;

    # Определяет формат логов для записей в журнале доступа.
    # Этот формат включает информацию о клиенте, времени запроса, самом запросе, статусе ответа, объеме переданных данных, реферере, пользовательском агенте и IP-адресах.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Указывает файл для записи логов доступа и использует ранее определенный формат main.
    # Это помогает в мониторинге и анализе запросов к серверу.
    access_log /var/log/nginx/access.log main;

    # Включает отправку файлов с помощью системного вызова sendfile(),
    # что ускоряет процесс передачи файлов и снижает нагрузку на процессор.
    sendfile on;

    # Уменьшает количество отправляемых TCP пакетов, объединяя их.
    # Это полезно для повышения производительности при отправке больших файлов.
    tcp_nopush on;

    # Отключает задержку отправки данных в TCP, улучшая время отклика для небольших запросов.
    # Это делает взаимодействие с сервером более быстрым.
    tcp_nodelay on;

    # Устанавливает время ожидания (в секундах) для keep-alive соединений.
    # Это время, в течение которого сервер будет держать соединение открытым для возможных последующих запросов от того же клиента,
    # что снижает накладные расходы на установку новых соединений.
    keepalive_timeout 65;

    # Подключает все файлы конфигураций из директории /etc/nginx/conf.d/.
    # Это позволяет разделить конфигурацию на несколько файлов для удобства управления и модульности.
    include /etc/nginx/conf.d/*.conf;

    # Этот блок определяет настройки для конкретного виртуального сервера.
    server {
        # Указывает, что сервер будет слушать порт 80 (стандартный порт для HTTP).
        listen 80;

        # Устанавливает имя сервера или его IP-адрес.
        server_name _;

        # Конфигурация для сервировки статических файлов React.
        # Указывает, что эти настройки применяются ко всем запросам к корню сайта.
        location / {
            # Устанавливает корневую директорию для сервировки файлов.
            # В данном случае, это директория /usr/share/nginx/html, где обычно хранятся статические файлы вашего сайта.
            root /usr/share/nginx/html;

            # Задает файл по умолчанию для директорий. Когда клиент запрашивает директорию, сервер будет автоматически искать файл index.html в этой директории и отдавать его, если он существует.
            index index.html;

            # Пытается найти файл по указанному URI. Если не найдено, ищет директорию.
            # Если и это не удалось, возвращает index.html. Это особенно важно для одностраничных приложений (SPA),
            # чтобы маршрутизация на стороне клиента работала корректно.
            # Например, если пользователь переходит по URL /about, сервер отдает index.html, а JavaScript-приложение уже решает, что отображать.
            try_files $uri $uri/ /index.html;
        }

        # Проксирование запросов на API к контейнеру с Express.
        # Указывает, что эти настройки применяются ко всем запросам, начинающимся с /api.
        location /api {
            # Проксирует все запросы на локальный сервер по адресу http://localhost:4000.
            # Это означает, что запросы к API будут перенаправляться на ваш сервер Express, который работает на этом порту.
            proxy_pass http://localhost:4000;

            # Передает заголовок Host из исходного запроса.
            # Это важно для корректной работы приложений, которые зависят от значения заголовка Host.
            proxy_set_header Host $host;

            # Передает реальный IP-адрес клиента.
            # Это позволяет серверу Express видеть реальный IP-адрес пользователя, а не IP-адрес прокси-сервера.
            proxy_set_header X-Real-IP $remote_addr;

            # Добавляет заголовок X-Forwarded-For с IP-адресами всех промежуточных прокси.
            # Это полезно для отслеживания цепочки проксирования.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Передает протокол (HTTP или HTTPS) из исходного запроса.
            # Это позволяет вашему серверу Express понимать, был ли исходный запрос защищенным.
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Указывает страницу ошибки для кодов 500, 502, 503 и 504.
        error_page 500 502 503 504 /50x.html;

        # Указывает корневую директорию для страницы ошибки. В данном случае, это директория /usr/share/nginx/html.
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
